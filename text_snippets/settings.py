"""
Django settings for text_snippets project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-qyu@hj6!e9*p0sv)=9m%2x0$h6^5--#5vtii7t)(l*3wo%f6ah'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',                   # Django REST Framework
    'rest_framework_simplejwt',         # Simple JWT for token-based authentication
    'snippets',                         # Your app (assuming it's named 'snippets')
]

# Configuration for Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # JWT authentication for REST Framework
    ),
}

# Configuration for Simple JWT
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=10),                # Lifetime of access tokens
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),                   # Lifetime of refresh tokens
    'ROTATE_REFRESH_TOKENS': False,                                # Whether to rotate refresh tokens
    'BLACKLIST_AFTER_ROTATION': True,                              # Whether to blacklist tokens after rotation
    'UPDATE_LAST_LOGIN': False,                                    # Whether to update the last login timestamp

    'ALGORITHM': 'HS256',                                          # Algorithm for JWT
    'VERIFYING_KEY': None,                                         # Key used for verification (none for now)
    'AUDIENCE': None,                                              # Audience claim (none for now)
    'ISSUER': None,                                                # Issuer claim (none for now)

    'AUTH_HEADER_TYPES': ('Bearer',),                              # Header types for authentication
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',                      # Header name for authentication
    'USER_ID_FIELD': 'id',                                         # Field name for user ID
    'USER_ID_CLAIM': 'user_id',                                    # Claim name for user ID
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',  # Authentication rule for users

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),  # Token classes for authentication
    'TOKEN_TYPE_CLAIM': 'token_type',                               # Claim name for token type

    'JTI_CLAIM': 'jti',                                             # Claim name for JWT ID

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',               # Claim name for sliding token refresh expiration
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),                 # Lifetime for sliding tokens
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),            # Lifetime for sliding token refresh
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'text_snippets.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'text_snippets.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
